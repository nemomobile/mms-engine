<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE node PUBLIC
  "-//freedesktop//DTD D-Bus Object Introspection 1.0//EN"
  "http://standards.freedesktop.org/dbus/1.0/introspect.dtd">
<node>
  <interface name="org.nemomobile.MmsHandler">

    <!--
        ===============================================================
        ======================== R E C E I V E ========================
        ===============================================================
    -->

    <!--
        ===============================================================
        WAP push notification

        No information is available about the message other than
        its sender, expiry date and possibly the subject.

        Returns either empty string (for manual retrieval) or non-empty
        record id which is passed back to messageReceiveStateChanged()
        to track the progress and to messageReceived() after message
        has been successfully received and decoded.

        In the manual receive scenario, MMS engine does nothing about
        this message and may even shut down until its "receiveMessage"
        method is invoked.

        ================================================================
    -->
    <method name="messageNotification">
      <!--
          Subscriber identity.
      -->
      <arg direction="in" type="s" name="imsi"/>
      <!--
          Sender's phone number.
      -->
      <arg direction="in" type="s" name="from"/>
      <!--
          Message subject (often empty).
      -->
      <arg direction="in" type="s" name="subject"/>
      <!--
          Message expiry date.
          In seconds from 1970-01-01, 00:00:00 GMT.
      -->
      <arg direction="in" type="u" name="expiry"/>
      <!--
          Raw push message. Raw file is needed for initiating manual
          receive or restarting processing after catastrophic failure
          (like battery removal or sudden shutdown) in the middle of
          message reception, i.e. before messageReceived is invoked.
      -->
      <arg type="ay" name="data" direction="in">
        <annotation name="org.gtk.GDBus.C.ForceGVariant" value="true"/>
      </arg>
      <!--
          Database record id for immediate retrieval, empty for manual.
      -->
      <arg direction="out" type="s" name="recId"/>
    </method>

    <!--
        ===============================================================

        Message receive state update. No more such notifications will
        be issued after messageReceived has been invoked. In case if UI
        supports some kind of progress indication, may be extended with
        number of bytes received so far.

        If retrieval was started automatically (messageNotification
        returned non-empty database record id) then retries will be
        automatic too, i.e. Deferred/NoSpace state will become Receiving
        after a while and so on until message is either received, exires
        or gets deleted by the user.

        If retrieval was initiated manually, then retries will also be
        manual.

        If we allow the user to switch between automatic and manual
        retrieval modes then UI will need to notify MMS engine when
        this setting changes so that it can adjust its behavior
        accordingly.

        ===============================================================
    -->
    <method name="messageReceiveStateChanged">
      <!--
          Database record id.
      -->
      <arg direction="in" type="s" name="recId"/>
      <!--
          Indicates the current state of affairs:

          0 (Receiving):  Downloading the content
          1 (Deferred):   Network trouble, need to retry
          2 (NoSpace):    No space left, delete something and try again
          3 (Decoding):   Message has been received and is being decoded
          4 (RecvError):  Failed to download the content
          5 (Garbage):    Decoding error
      -->
      <arg direction="in" type="i" name="state"/>
    </method>

    <!--
        ===============================================================

        Message and all its attachments have been received and decoded.
        This shouldn't happen more than once in the lifetime of the
        message but it may if you call MMS engine's "receiveMessage"
        method again. Don't do that.

        ===============================================================
    -->
    <method name="messageReceived">
      <!--
          Database record id.
      -->
      <arg direction="in" type="s" name="recId"/>
      <!--
          Message-ID.
      -->
      <arg direction="in" type="s" name="mmsId"/>
      <!--
          Sender's phone number (may differ from the one passed to
          messageNotification but usually the same).
      -->
      <arg direction="in" type="s" name="from"/>
      <!--
          To: list.
      -->
      <arg direction="in" type="as" name="to"/>
      <!--
          Cc: list.
      -->
      <arg direction="in" type="as" name="cc"/>
      <!--
          Message subject. Again, may be different from the one passed
          to messageNotification but usually the same.
      -->
      <arg direction="in" type="s" name="subject"/>
      <!--
          Date of the latest message submission or forwarding.
          In seconds from 1970-01-01, 00:00:00 GMT.
      -->
      <arg direction="in" type="u" name="date"/>
      <!--
          Message priority:

          0: Low
          1: Normal
          2: High
      -->
      <arg direction="in" type="i" name="priority"/>
      <!--
          Message class. Even though it may be pretty much any
          string, normally it will be one the strings reserved
          for standard message classes:

            "Personal"
            "Advertisement"
            "Informational"
            "Auto"
      -->
      <arg direction="in" type="s" name="cls"/>
      <!--
          Specifies whether or not sender requested the read report.
          MMS engine will provide D-Bus method the send read reports.

          FALSE: No read reports, please
          TRUE:  Yes, please send me the read report
      -->
      <arg direction="in" type="b" name="readReport"/>
      <!--
          Each variant in the parts array is (ssss):

          s - file name
          s - content type (including charset)
          s - content id

          If we decide so, MMS engine may drop SMIL attachments.

          After this method returns, the caller may (and most likely
          will) unlink the files, so they must be copied somewhere or
          better yet hard-linked (if that's possible). Please don't
          make any assumptions about whether hard-linking is possible.
      -->
      <arg direction="in" type="a(sss)" name="parts"/>
      <annotation name="org.qtproject.QtDBus.QtTypeName.In10" value="MmsPartList"/>
    </method>

    <!--
        ===============================================================
        =========================== S E N D ===========================
        ===============================================================
    -->

    <!--
        ===============================================================

        Message send state update. These are intermediate states.
        Once the message has been uploaded to MMSC and operator
        accepts it for delivery, messageSent notification will be
        issued and there will be no messageSendStateChanged calls
        for this message anymore.

        ===============================================================
    -->
    <method name="messageSendStateChanged">
      <!--
          Database record id.
      -->
      <arg direction="in" type="s" name="recId"/>
      <!--
          Indicates the current state of affairs:

          0 (Encoding):  Encoding the message
          1 (TooBig):    Message is too big
          2 (Sending):   Transmitting the data
          3 (Deferred):  Network trouble, need to retry
          4 (NoSpace):   No space left, delete something and try again
          5 (SendError): Failed to send the message
          6 (Refused):   Operator refused to accept the message
      -->
      <arg direction="in" type="i" name="state"/>
    </method>

    <!--
        ===============================================================

        Message send notification. Means that message has been queued
        for delivery and lets the handler know what MMS message id has
        been assigned to it by the operator.

        ===============================================================
    -->
    <method name="messageSent">
      <!--
          Database record id.
      -->
      <arg direction="in" type="s" name="recId"/>
      <!--
          Message-ID.

          Message id is assigned by the operator when it accepts
          the message for delivery. This string will identify the
          message in deliveryReport and readReport notifications.
      -->
      <arg direction="in" type="s" name="mmsId"/>
    </method>

    <!--
        ===============================================================

        Message delivery notification. These are only coming if
        delivery reports were requested when message was sent.

        ===============================================================
    -->
    <method name="deliveryReport">
      <!--
          Subscriber identity. Paranoidal implementation may compare
          it with the IMSI that was used to send the original message.
          It's not really necessary because Message-ID is supposed to
          be globally unique.
      -->
      <arg direction="in" type="s" name="imsi"/>
      <!--
          Message-ID
      -->
      <arg direction="in" type="s" name="mmsId"/>
      <!--
          Whom message has been delivered to. There will be a separate
          delivery report from each recipient.
      -->
      <arg direction="in" type="s" name="recipient"/>
      <!--
          Delivery status:

          0: Indeterminate
          1: Expired
          2: Retrieved
          3: Rejected
          4: Deferred
          5: Unrecognised
          6: Forwarded
      -->
      <arg direction="in" type="i" name="status"/>
    </method>

    <!--
        ===============================================================

        Message read notification. These are only coming if read
        reports were requested when message was sent and recipients
        don't mind sending read reports.

        ===============================================================
    -->
    <method name="readReport">
      <!--
          Subscriber identity. Paranoidal implementation may compare
          it with the IMSI that was used to send the original message.
          It's not really necessary because Message-ID is supposed to
          be globally unique.
      -->
      <arg direction="in" type="s" name="imsi"/>
      <!--
          Message-ID.
      -->
      <arg direction="in" type="s" name="mmsId"/>
      <!--
          Recipient's address. There will be a separate read
          report from each recipient who doesn't mind sending
          read reports.
      -->
      <arg direction="in" type="s" name="recipient"/>
      <!--
          Read status:

          0: Read
          1: Deleted without reading
      -->
      <arg direction="in" type="i" name="status"/>
    </method>
  </interface>
</node>
